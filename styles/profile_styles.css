#wrapper {
    padding-bottom: var(--sticky-footer-height);
    height: 100%;
    display: flex;
    flex-direction: column;
    /* align-items: center; */
    /* align-items: stretch; */
    /* grid-template-columns: repeat(8, 1fr); */
}
:root {
    --pink-accent: 254, 53, 149;
}

#wrapper > section {
    margin: calc(min(3.0rem, 2%));
}

/* profile_styles.css | http://127.0.0.1:5502/styles/profile_styles.css */

#user_pic_block h1 {
    font-size: 2.3rem;
    align-self: flex-end;
}

#user_pic_block #emailText {
    color: var(--bs-gray);
}

#user_pic_block {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 2rem;
}

/* Real broken icon stuff */
#user_pic_block .edit-icon {
    /* Use the current text color as the icon’s fill color. */
    background-color: white;
    /* fill: currentColor;
    stroke: currentColor; */
    /* Inherit the text’s size too. Also allows sizing the icon by changing its font-size. */
    width: 1em;
    height: 1em;
    /* The default vertical-align is `baseline`, which leaves a few pixels of space below the icon. Using `center` prevents this. For icons shown alongside text, you may want to use a more precise value, e.g. `vertical-align: -4px` or `vertical-align: -0.15em`. */
    /* vertical-align: middle; */
    /* Paths and strokes that overflow the viewBox can show in IE11. */
    /* overflow: hidden; */
    cursor: pointer;
}
#user_pic_block .img-avatar {
    /* Circle clipping mask for user profile images. */
    clip-path: circle(45% at 50% 50%);

    /* Max-height to make it not take up all of the screen */
    max-height: 6rem;
    /* height: 5rem; */
}

#bio {
    text-align: center;
}

#calendar {
    width: 100%;
    grid-area: calendar;
}
.day:not(:hover)::before {
    content: ".";
    font-size: 10pt;
}
.day span {
    display: none;
}
.day:hover span {
    display: inline;
}
table {
    text-align: center;
    table-layout: fixed;
}
tr {
    height: auto;
}
tr > {
    font-size: 10px;
}
td:not(:hover)::before {
    content: ".";
    font-size: 15px;
}
td span {
    display: none;
}
td:hover span {
    display: inline;
}

section#buttons {    
    display: flex;
    justify-content: center;
    margin: 1rem;
    gap: 6rem;
}
#buttons > button {
		/* background-color: rgba(0, 0, 255, 0.1); */
		/* border: 1px solid white; */
		/* border: 1px solid rbg(var(--bs-darker-rgb); */
		/* border: 1px solid rg(var(--bs-darker-rgb); */
		/* border: 1px solid rgb(var(--bs-darker-rgb); */
		/* border: 1px solid r(var(--bs-darker-rgb); */
		/* border: 1px solid (var(--bs-darker-rgb); */
		/* color: white; */
		/* color: rgb\); */
		/* font-size: 1rem; */
		font-size: 1.5rem;
		border-radius: 0.325rem;
}
#buttons > button:hover {
    background-color: rgba(0, 0, 255, 0.7);
    border: 2px solid white;
}

#make_goal {
    margin-left: 30%;
    margin-right: 30%;
    padding: 5px;
    border: 2px solid white;
    background-color: rgba(0, 0, 255, 0.7);
     overflow: hidden;
}
#make_goal form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: repeat(6, 1fr);
    column-gap: 2%;
} 
#make_goal form input,
#make_goal form textarea {
    border-radius: 5px;
}
#make_goal form #goalDescrip {
    grid-column: 1 / span 1;
    grid-row: 1 / span 5;
}
#make_goal form #dateStartInput {
    grid-column: 2 / span 1;
    grid-row: 1 / span 1;
    margin-left: 5em;
}
#make_goal form #dateStartLabel {
    grid-column: 2 / span 1;
    grid-row: 1 / span 1;
}
#make_goal form #dateEndInput {
    grid-column: 2 / span 1;
    grid-row: 2 / span 1;
    margin-left: 5em;
}
#make_goal form #dateEndLabel {
    grid-column: 2 / span 1;
    grid-row: 2 / span 1;
}
#make_goal form #amountGoalInput {
    grid-column: 2 / span 1;
    grid-row: 5 / span 1;
    margin-left: 30%;
    margin-right: 30%;
}
#make_goal form #amountGoalLabel {
    grid-column: 2 / span 1;
    grid-row: 4 / span 1;
    text-align: center;
}
#make_goal form #saveGoal {
    grid-column: 1 / span 1;
    grid-row: 6 / span 1;
    width: 5em;
    justify-self: left;
} 
#make_goal form #cancelGoal {
    grid-column: 2 / span 1;
    grid-row: 6 / span 1;
    width: 5em;
    justify-self: right;
}

#user_goals {
    padding: 1rem;
    font-size: 0.7rem;
    display: flex;
    gap: 1rem;

    flex-direction: column;

    grid-template: 3rem 1fr 1fr / 1fr;
    transform: translateY(-250px);
}
#user_goals h2 {
    grid-column: 1 / span 2;
}
.make_goal_slideUp {
    animation: slide 2s infinite reverse;
}
.make_goal_slideDown {
    animation: slide 2s infinite; 
}
.make_goal_uncovered {
    transform: translateY(0) !important;
}
@keyframes slide{
    0% {transform: translateY(-250px);}
    100%{transform: translateY(0);}
}

/*== Goal widget ==*/
.goal {
    /* border: 1px solid white; */
    border-radius: 0.5rem;

    padding: 1rem;
    max-height: 100%;
    max-width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
}
.progressbar {
    display: block;
    min-width: 90%;
    --progressbar-finish-percent: 100%; /* JS will change this */
    max-height: 1.5rem;
}
@keyframes load-progressbar {
    from {
        transform: scaleX(0%);
    }
    to {
        transform: scaleX(var(--progressbar-finish-percent));
    }
}
.progressbar-fill {
    animation: load-progressbar 1.5s ease;
}

.progress-anim-finished {
    transform: scaleX(var(--progressbar-finish-percent));
}

.goal-smallinfo {
    display: flex;
    width: 90%;
    justify-content: space-between;
    flex-direction: row;
}

.goal-deadline {
    align-self: flex-end;
}

/* Put the New Goal button in the centre */
section#new_goal_button {
    display: flex;
    flex-direction: row;
    justify-content: center;
}

/* Make the button quite large and inviting. */
section#new_goal_button > button {
    min-width: 16rem;
}

/* Round the corners of elements with rounded class */
.rounded {
    border-radius: 1em !important;
}



/* What do these things do? They seem obsolete.*/

/* Hide text used as an accessibility label: */
/* .access-label {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    white-space: nowrap !important;
} */

/* .linklist {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}
.linklist > li {
    display: inline;
}
.linklist > li > a {
    width: 4em;
    height: 4em;
} */


